name: vod Docker Images

on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 0 * * *' # 每天 0 点自动触发

env:
  IMAGE_SOURCE: sifan1/vodspider
  IMAGE_TARGET: abansheng/vod

jobs:
  mirror-image:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出仓库
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: 设置 QEMU 和 Buildx
      - name: Set up QEMU and Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # Step 3: 登录 DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: 分别处理每个架构和版本
      - name: Mirror and push amd64 images
        run: |
          for version in v2 v3 v4 latest; do
            echo "Processing version: $version for platform: linux/amd64"
            docker pull --platform linux/amd64 ${{ env.IMAGE_SOURCE }}:$version || continue
            docker tag ${{ env.IMAGE_SOURCE }}:$version ${{ env.IMAGE_TARGET }}:$version-amd64
            docker push ${{ env.IMAGE_TARGET }}:$version-amd64
          done

      - name: Mirror and push arm64 images
        run: |
          for version in v2 v3 v4 latest; do
            echo "Processing version: $version for platform: linux/arm64"
            docker pull --platform linux/arm64 ${{ env.IMAGE_SOURCE }}:$version || continue
            docker tag ${{ env.IMAGE_SOURCE }}:$version ${{ env.IMAGE_TARGET }}:$version-arm64
            docker push ${{ env.IMAGE_TARGET }}:$version-arm64
          done

      - name: Mirror and push armv7 images
        run: |
          for version in v2 v3 v4 latest; do
            echo "Processing version: $version for platform: linux/arm/v7"
            docker pull --platform linux/arm/v7 ${{ env.IMAGE_SOURCE }}:$version || continue
            docker tag ${{ env.IMAGE_SOURCE }}:$version ${{ env.IMAGE_TARGET }}:$version-armv7
            docker push ${{ env.IMAGE_TARGET }}:$version-armv7
          done

      # Step 5: 分别创建多架构清单
      - name: Create and push multi-arch manifests
        run: |
          for version in v2 v3 v4 latest; do
            echo "Creating multi-arch manifest for version: $version"
            docker manifest create ${{ env.IMAGE_TARGET }}:$version \
              --amend ${{ env.IMAGE_TARGET }}:$version-amd64 \
              --amend ${{ env.IMAGE_TARGET }}:$version-arm64 \
              --amend ${{ env.IMAGE_TARGET }}:$version-armv7
            docker manifest push ${{ env.IMAGE_TARGET }}:$version
          done
